#! /usr/bin/env python3

import argparse
import subprocess

parser = argparse.ArgumentParser(description='Deploy packer template')
parser.add_argument('-v', '--validate', action='store_true', help='Validate packer template')
parser.add_argument('-var-file', required=True, help='Path to packer variable file')
parser.add_argument('-var', action='append', help='Packer variable')
parser.add_argument('-c', '--commit', action='store_true', help='Auto confirm (default: false)')
parser.add_argument('template_file_path', help='Path to packer template file')

args = parser.parse_args()


def main():
  var_file = args.var_file
  vars = dict([v.split("=") for v in args.var if '=' in v] if args.var else [])
  commit = args.commit

  # check for the node_name variable
  if 'node_name' not in vars:
    vars['node_name'] = input('Enter node name to deploy: ')

  # check for vm_id variable
  if 'vm_id' not in vars:
    vars['vm_id'] = input('Enter vm id: ')

  cmd = ['packer', 'build', '-var-file', var_file]

  # add variable to command
  for key, value in vars.items():
    cmd.append('-var')
    cmd.append(f'{key}={value}')

  cmd.append(args.template_file_path)

  if args.validate:
    cmd[1] = 'validate'
  elif not commit:
    should_continue = input('Running in build mode, do you want to continue? [y/N]: ')
    if should_continue.lower() != 'y':
      exit(0)

  print("Running command: \n    " + ' '.join(cmd))
  process = subprocess.Popen(cmd, stdout=subprocess.PIPE, universal_newlines=True)
  for stdout_line in iter(process.stdout.readline, ""):
    print(stdout_line, end="")

  process.stdout.close()
  return_code = process.wait()
  if return_code:
    raise subprocess.CalledProcessError(return_code, cmd)

if __name__ == '__main__':
  main()
